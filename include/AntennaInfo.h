/*
 * Copyright (C) 2019  Bogdan Oancea

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version and under the EUPL free software license version 1.0 or later.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/> and
 * <https://ec.europa.eu/info/european-union-public-licence_en>
 *
 * A data simulator for mobile phone network events
 *
 * AntennaInfo.h
 *
 *  Created on: May 16, 2019
 *      Author: Bogdan Oancea
 *      Email : bogdan.oancea@gmail.com
 */

#ifndef ANTENNAINFO_H_
#define ANTENNAINFO_H_

#include <string>
#include <events/EventType.h>
#include <events/EventCode.h>
#include <CSVparser.hpp>

using namespace std;

/**
 * This class encapsulates all information about the network events generated by the interaction between a mobile device and an antenna:
 * the timestamp, antennaId, event code, the device id, the exact location of the event, the network type and the timing advance (TA) in case
 * the simulation is configured for TA events. An AntennaInfo object is a row in the .csv file with all network events file.
 */
class AntennaInfo {
public:

	/**
	 * Constructor of the class. It builds an object with member values given by the arguments of the constructor.
	 * @param evtType the event type: EventType::CELLID or EventType::CELLIDTA
	 * @param r a Row object that contains the comma separated values of the parameters of an event, read from the csv files generated by each
	 * antenna during simulation.
	 */
	AntennaInfo(EventType evtType, Row r);



	/**
	 * Returns the antenna id that registered the event.
	 * @return the id of the antenna that registered the event.
	 */
	const unsigned long getAntennaId() const;


	/**
	 * Returns the id of the device that generated the event.
	 *@return the id of the device that generated the event.
	 */
	const unsigned long getDeviceId() const;

	/**
	 * Returns the  event code.
	 * @return the event code. It could take the following values:
	 * EventCode::ATTACH_DEVICE - a device is connected to an antenna;
	 * DETACH_DEVICE - a devices is disconnected from an antenna;
	 * ALREADY_ATTACHED_DEVICE - a device is already connected to the antenna that registered the event;
	 * IN_RANGE_NOT_ATTACHED_DEVICE - a device was detected in the coverage area of an antenna but the connection to the antenna failed (from different reasons).
	 */
	const EventCode getEventCode() const;

	/**
	 * Returns the timestamp of the event.
	 * @return the timestamp of the event.
	 */
	const unsigned long getTime() const;

	/**
	 * Returns the x coordinate of the device that generated the event.
	 * @return x coordinate of the device that generated the event.
	 */
	const double getX() const;

	/**
	 * Returns the y coordinate of the device that generated the event.
	 * @return y coordinate of the device that generated the event.
	 */
	const double getY() const;

	/**
	 * Returns a string representation of on object of this class.
	 * @return a string representation of on object of this class.
	 */
	const string toString() const;

	/**
	 * Overloaded operator to compare to objects
	 * @param ai the other object to compare to.
	 * @return true if this object is less than ai, false otherwise. An object is less than another object if the
	 * timestamp value of the first object is lees than the timestamp of the second one.
	 */
	bool operator < (const AntennaInfo& ai) const;


private:
	EventType m_eventType;
	unsigned long m_time;
	vector<string> m_textRow;
};

#endif /* ANTENNAINFO_H_ */
