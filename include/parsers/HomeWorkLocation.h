/*
 * Copyright (C) 2019  Bogdan Oancea

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version and under the EUPL free software license version 1.0 or later.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/> and
 * <https://ec.europa.eu/info/european-union-public-licence_en>
 *
 * A data simulator for mobile phone network events
 *
 * HomeWorkLocation.h
 *
 *  Created on: Mar 11, 2021
 *      Author: Bogdan Oancea
 *      Email : bogdan.oancea@gmail.com
 */

#ifndef INCLUDE_HOMEWORKLOCATION_H_
#define INCLUDE_HOMEWORKLOCATION_H_

#include <string>

using namespace std;

/**
 * This class encapsulates the information needed to generate the home or work location on the map. All
 * the information need to build a HomeWorkLocation object are read from the simulation configuration file.
 * There could be several home and work locations defined in the simulation configuration file. For each of
 * them a HomeWorkLocation object is build while this file is parsed and they a kept in two vectors: one for the
 * home locations and one for the work locations. Then, for each person, a random HomeWorkLocation
 * object is selected, and based on the information in this object, the home location is generated using a normal
 * distribution with the mean (x,y) and the standard deviation (sdx, sdy). Then, a HomeWorkLocation object is
 * randomly selected from the vector storing work locations and a work location is generated. The work location is generated
 * as a point uniformly distributed inside an ellipse centered in (x, y) with radii (sdx, sdy).
 *
 */
class HomeWorkLocation {
public:
	/**
	 * Constructor of the class. It builds a HomeWorkLocation object by setting its members using the values passed as parameters.
	 * The home locations for each person are generated as normally distributed values with the means given by x, y and
	 * the standard deviations given by sdx, sdy. The z coordinate of the home location is set according to the z value read from
	 * the simulation configuration file. The work locations are generated differently: they are points uniformly
	 * distributed inside the ellipse with the center (x,y) and the two radii (sdx, sdy). The z coordinate of the work location
	 * is set according to the z value read from the simulation configuration file. An anchor location is generated similar to the
	 * work location. These locations (for each person) are generated by the PersonsConfigParser and set to each Person object.
	 * @param x the x coordinate of a Home - Work - Anchor location.
	 * @param y  the y coordinate of a Home - Work - Anchor location.
	 * @param z  the z coordinate of a Home - Work- Anchor location.
	 * @param sdx the standard deviation / ellipse radius of the x coordinate of a Home - Work - Anchor point location.
	 * @param sdy the standard deviation / ellipse radius of the y coordinate of a Home - Work - Anchor point location.
	 * @param sdz the standard deviation / ellipse radius of the z coordinate of a Home - Work - Anchor point location. This parameter is not actually used but
	 * it can be used in future versions. All locations take the same value for the z coordinate read from the simulation configuration file.
	 */
	HomeWorkLocation(double x, double y, double z, double sdx, double sdy, double sdz);

	/**
	 * The default constructor is deleted. A HomeWorkLocation object without the values for the members makes no sense.
	 */
	HomeWorkLocation() = delete;

	/**
	 * Default destructor.
	 */
	virtual ~HomeWorkLocation();

	/**
	 * Return a string representation of the class, containing the values of all members, comma separated. It is useful
	 * for debugging or for printing these information. An example of such a string:
	 *
	 * \code
	 * X:2000 Y:7500 Z:0 Sd_x:1000 Sd_y:1000 Sd_z:0
	 * \endcode
	 *
	 * @return a string representation of the class, containing the values of all members, comma separated.
	 */
	string toString();

	/**
	 * Return the x coordinate value.
	 * @return the x coordinate value.
	 */
	inline double getX() {return m_x;}

	/**
	 * Return the y coordinate value.
	 * @return the y coordinate value.
	 */
	inline double getY() {return m_y;}

	/**
	 * Return the z coordinate value.
	 * @return the z coordinate value.
	 */
	inline double getZ() {return m_z;}

	/**
	 * Returns the standard deviation on X axis of the home location or the radius of the ellipse
	 * where the work locations and anchor point locations are generated.
	 * @return the standard deviation on X axis of the home location or the radius of the ellipse
	 * where the work locations and anchor point locations are generated.
	 */
	inline double getSdX() {return m_sdx;}

	/**
	 * Returns the standard deviation on Y axis of the home location or the radius of the ellipse
	 * where the work locations and anchor point locations are generated.
	 * @return the standard deviation on Y axis of the home location or the radius of the ellipse
	 * where the work locations and anchor point locations are generated.
	 */
	inline double getSdY() {return m_sdy;}

	/**
	 * Returns the standard deviation on Z axis of the home location or the radius of the ellipse
	 * where the work locations and anchor point locations are generated. Currently this value is not used
	 * but it may be  used in future versions.
	 * @return the standard deviation on Z axis of the home location or the radius of the ellipse
	 * where the work locations and anchor point locations are generated. Currently this value is not used
	 * but it may be  used in future versions.
	 */
	inline double getSdZ() {return m_sdz;}

private:
	double m_x, m_y, m_z;
	double m_sdx, m_sdy, m_sdz;
};

#endif /* INCLUDE_HOMEWORKLOCATION_H_ */
