.TH "MobilePhone" 3 "Wed May 12 2021" "Simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MobilePhone
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <MobilePhone\&.h>\fP
.PP
Inherits \fBHoldableAgent\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMobilePhone\fP (const \fBMap\fP *m, const unsigned long id, Point *initPosition, \fBAgent\fP *holder, const \fBClock\fP *clock, double threshold, \fBHoldableAgent::CONNECTION_TYPE\fP connType)"
.br
.ti -1c
.RI "virtual \fB~MobilePhone\fP ()"
.br
.ti -1c
.RI "const string \fBtoString\fP () const override"
.br
.ti -1c
.RI "Point * \fBmove\fP () override"
.br
.ti -1c
.RI "bool \fBtryConnect\fP () override"
.br
.ti -1c
.RI "const \fBMobileOperator\fP * \fBgetMobileOperator\fP () const"
.br
.ti -1c
.RI "void \fBsetMobileOperator\fP (\fBMobileOperator\fP *mno)"
.br
.ti -1c
.RI "double \fBgetConnectionThreshold\fP () const"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const string \fBgetHeader\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "double \fBm_threshold\fP"
.br
.ti -1c
.RI "\fBAntenna\fP * \fBm_connectedTo\fP"
.br
.ti -1c
.RI "\fBHoldableAgent::CONNECTION_TYPE\fP \fBm_connType\fP"
.br
.ti -1c
.RI "\fBMobileOperator\fP * \fBm_mno\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This class represents a mobile phone\&. A mobile phone is own by a \fBPerson\fP and it moves on the map together with its owner\&. While moving, at every time step it tries to connect to an antenna\&. The connection event is triggered by \fBsetLocation()\fP\&. The connection to antenna is determined by the signal emitted by antennas\&. A parameter in the simulation configuration file set the criterion used to connect: the power of the signal, the signal strength or the signal quality\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "MobilePhone::MobilePhone (const \fBMap\fP * m, const unsigned long id, Point * initPosition, \fBAgent\fP * holder, const \fBClock\fP * clock, double threshold, \fBHoldableAgent::CONNECTION_TYPE\fP connType)\fC [explicit]\fP"
Builds a new MobilewPhone object with the parameters provided by the user\&. 
.PP
\fBParameters\fP
.RS 4
\fIm\fP a pointer to the \fBMap\fP object where the simulation takes place\&. 
.br
\fIid\fP the id of the mobile phone\&. 
.br
\fIinitPosition\fP the initial location of the phone on the map\&. 
.br
\fIholder\fP a pointer to the \fBAgent\fP object that owns this mobile phone\&. 
.br
\fIclock\fP a pointer to the \fBClock\fP object used in this simulation\&. 
.br
\fIthreshold\fP the minimum power, signal qaulity or signal strength of the field below which the mobile phone cannot connect to an antenna\&. 
.br
\fIconnType\fP the criterion used for the connection to an antenna: based on the power of the signal or based on the signal quality\&. It could take three values: HoldableAgent::CONNECTION_TYPE::USING_POWER, HoldableAgent::CONNECTION_TYPE::USING_SIGNAL_QUALITY or HoldableAgent::CONNECTION_TYPE::USING_SIGNAL_STRENGTH\&. 
.RE
.PP

.SS "virtual MobilePhone::~MobilePhone ()\fC [virtual]\fP"
The default destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "double MobilePhone::getConnectionThreshold () const"
Returns the minimum value of the signal strength/power/quality below which the phone cannot use the signal (i\&.e\&. the signal is considered noise)\&. The returned value is interpreted as signal strength, power or quality according to the connection type\&. 
.PP
\fBReturns\fP
.RS 4
the minimum value of the signal strength/power/quality below which the phone cannot use the signal (i\&.e\&. the signal is considered noise)\&. 
.RE
.PP

.SS "static const string MobilePhone::getHeader ()\fC [static]\fP"

.SS "const \fBMobileOperator\fP* MobilePhone::getMobileOperator () const"
Returns the \fBMobileOperator\fP object of this mobile phone\&. Each \fBMobilePhone\fP should belong to a Mobile Operator\&. 
.PP
\fBReturns\fP
.RS 4
the \fBMobileOperator\fP object of this mobile phone\&. Each \fBMobilePhone\fP should belong to a Mobile Operator\&. 
.RE
.PP

.SS "Point* MobilePhone::move ()\fC [inline]\fP, \fC [override]\fP, \fC [virtual]\fP"
Makes a step on the map according to an algorithm\&. The direction and the length of the step is determined by the displacement strategy and by the \fBPerson\fP object who owns this phone\&. The displacement strategy is set at the \fBPerson\fP object creation and currently two strategies are supported: \fBRandomWalkDisplacement\fP and \fBRandomWalkDriftDisplacement\fP\&. \fBRandomWalkDisplacement\fP means that at each time instant the direction is generated as a uniformly distributed random value and the step length is computed multiplying the speed with the time interval set in the simulation configuration file\&. If a step projects it outside the map, it stops on the boundary\&. \fBRandomWalkDriftDisplacement\fP means that there is a preference in the direction of the movement\&. There are two constants defined, SIM_TREND_ANGLE_1 and SIM_TREND_ANGLE_2 (3PI/4 and 5PI/4), and in the first half of the simulation the direction is generated as a normal distributed random value with the mean equals to SIM_TREND_ANGLE_1 and sd = 0\&.1 while during the second half of the simulation it is generated as a normal distributed random value with the mean equals to SIM_TREND_ANGLE_2 and the same sd\&. Again, any kind of \fBMovableAgent\fP can only move inside the map boundary\&. If a step projects it outside the map, it stops on the boundary\&. 
.PP
\fBReturns\fP
.RS 4
the final location after the displacement\&. 
.RE
.PP

.PP
Implements \fBMovableAgent\fP\&.
.SS "void MobilePhone::setMobileOperator (\fBMobileOperator\fP * mno)"
Sets the \fBMobileOperator\fP object which owns this phone\&. 
.PP
\fBParameters\fP
.RS 4
\fImno\fP the \fBMobileOperator\fP object which owns this phone\&. 
.RE
.PP

.SS "const string MobilePhone::toString () const\fC [override]\fP"
Returns a human readable string representation of this class useful to output it to a file or console\&. 
.PP
\fBReturns\fP
.RS 4
a human readable string representation of this class\&. 
.RE
.PP

.SS "bool MobilePhone::tryConnect ()\fC [override]\fP, \fC [virtual]\fP"
This method is called after the phone moves (together with its owner) to a new location\&. It tries to connect the mobile phone to an antenna\&. The connection method is determined by inspecting the m_connType: using the power of the signal, using the quality of the signal or using the signal strength\&. The value of the m_connType is set by the constructor of the class\&. If the connection is successfully a pointer to the \fBAntenna\fP object where this mobile phone was connected is stored internally\&. 
.PP
\fBReturns\fP
.RS 4
true if the connection succeeds, false otherwise\&. 
.RE
.PP

.PP
Implements \fBHoldableAgent\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBAntenna\fP* MobilePhone::m_connectedTo\fC [private]\fP"

.SS "\fBHoldableAgent::CONNECTION_TYPE\fP MobilePhone::m_connType\fC [private]\fP"

.SS "\fBMobileOperator\fP* MobilePhone::m_mno\fC [private]\fP"

.SS "double MobilePhone::m_threshold\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Simulator from the source code\&.
