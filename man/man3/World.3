.TH "World" 3 "Wed May 19 2021" "Simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
World
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <World\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBWorld\fP (\fBMap\fP *map, const string &configPersonsFileName, const string &configAntennasFileName, const string &configSimulationFileName, const string &probabilitiesFileName) noexcept(false)"
.br
.ti -1c
.RI "virtual \fB~World\fP ()"
.br
.ti -1c
.RI "void \fBrunSimulation\fP () noexcept(false)"
.br
.ti -1c
.RI "\fBAgentsCollection\fP * \fBgetAgents\fP () const"
.br
.ti -1c
.RI "const \fBMap\fP * \fBgetMap\fP () const"
.br
.ti -1c
.RI "const string & \fBgetGridFilename\fP () const"
.br
.ti -1c
.RI "\fBClock\fP * \fBgetClock\fP ()"
.br
.ti -1c
.RI "void \fBcomputeProbabilities\fP (std::map< unsigned long, vector< \fBAntennaInfo\fP >> data)"
.br
.ti -1c
.RI "const string & \fBgetOutputDir\fP () const"
.br
.ti -1c
.RI "std::map< unsigned long, vector< \fBAntennaInfo\fP > > \fBgetEvents\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "int \fBwhichMNO\fP (vector< pair< string, double >> probs, vector< MobileOperator *> mnos)"
.br
.ti -1c
.RI "string \fBparseProbabilities\fP (const string &probabilitiesFileName)"
.br
.ti -1c
.RI "void \fBwriteSignalAndCells\fP (ostream &antennaFile)"
.br
.ti -1c
.RI "HoldableAgent::CONNECTION_TYPE \fBgetConnectionType\fP () const"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBAgentsCollection\fP * \fBm_agentsCollection\fP"
.br
.ti -1c
.RI "\fBSimulationConfiguration\fP * \fBm_sp\fP"
.br
.ti -1c
.RI "shared_ptr< \fBPostLocProb\fP > \fBm_postMethod\fP"
.br
.ti -1c
.RI "\fBEventFactory\fP * \fBm_eventFactory\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This is the class where the simulation process takes place\&. A \fBWorld\fP object has a \fBMap\fP, a \fBClock\fP, a set of Agents than can be persons, mobile phones, antennas, mobile operators etc\&. After generating all the required objects for simulation by reading the parameters from the input configuration files \fBrunSimulation()\fP method is called to perform the actual simulation\&. The output of the simulation process is written in several files\&. \fBAntenna\fP objects output their registered events in a \&.csv file and after the simulation ends, these files are merged in a single file that is used to compute the posterior localization probabilities for each mobile device\&. These probabilities are computed using a \fBGrid\fP that is overlapped on the \fBMap\fP, i\&.e\&. we compute the probability of a mobile phone to be in a tile of the grid\&. A finer the grid means more accurate localization but this come with an important computational cost\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "World::World (\fBMap\fP * map, const string & configPersonsFileName, const string & configAntennasFileName, const string & configSimulationFileName, const string & probabilitiesFileName)\fC [noexcept]\fP"
Builds a new \fBWorld\fP object, randomly generating a set of persons, antennas and mobile devices with the default parameters\&. This class is used only for testing and developing new features\&. For a real simulation the user should build the Wolrd object using the other constructor that takes the name of the input files as params\&. 
.PP
\fBParameters:\fP
.RS 4
\fImap\fP a pointer to a \fBMap\fP object where the simulation takes place\&. 
.br
\fInumPersons\fP the number of persons to be generated\&. 
.br
\fInumAntennas\fP the number of antennas to be generated\&. 
.br
\fInumMobilePhones\fP the number of mobile phones to be generated\&. These phones are randomly given to persons\&. Builds a new \fBWorld\fP object, reading the parameters for the Persons, Antennas and Mobile Phones from configuration files\&. The configuration files are in XML format and they should be provided as command line parameters\&. The general parameters of the simulation (duration, how people move around the map, how mobile phone try to connect to antennas, etc\&. are also read from a configuration file:
.IP "\(bu" 2
the persons configuration file is provided through the -p parameter in the command line\&.
.IP "\(bu" 2
the antennas configuration file is provided through the -a parameter in the command line\&.
.IP "\(bu" 2
the simulation configuration file is provided through the -s parameter in the command line\&.
.IP "\(bu" 2
the posterior probabilities configuration file is provided through the -pb parameter in the command line\&.
.PP
.br
\fImap\fP a pointer to a \fBMap\fP object where the simulation takes place 
.br
\fIconfigPersonsFileName\fP the configuration file name for the persons objects\&. 
.br
\fIconfigAntennasFileName\fP the configuration file name for antenna objects\&. 
.br
\fIconfigSimulationFileName\fP the general configuration file for a simulation\&. 
.br
\fIprobabilitiesFileName\fP the config file for the posterior location probabilites\&. 
.RE
.PP

.SS "virtual World::~World ()\fC [virtual]\fP"
Destructor It releases the memory allocated for the agents collection and the \fBClock\fP object\&. 
.SH "Member Function Documentation"
.PP 
.SS "void World::computeProbabilities (std::map< unsigned long, vector< \fBAntennaInfo\fP >> data)"

.SS "\fBAgentsCollection\fP* World::getAgents () const"
Returns the \fBAgentsCollection\fP used in simulation\&. 
.PP
\fBReturns:\fP
.RS 4
a pointer to \fBAgentsCollection\fP object\&. 
.RE
.PP

.SS "\fBClock\fP* World::getClock ()"

.SS "HoldableAgent::CONNECTION_TYPE World::getConnectionType () const\fC [private]\fP"

.SS "std::map<unsigned long, vector<\fBAntennaInfo\fP> > World::getEvents ()"
At the end of a simulation this method merges all the events saved by individual antennas in a single data structure\&. 
.PP
\fBReturns:\fP
.RS 4
a map of <MNO_ID, vector<AntennInfo>> where for each MNO identified by its ID has vector of all events saved by all antennas belonging to that MNO\&. This map is needed for computation of location probabilities\&. 
.RE
.PP

.SS "const string& World::getGridFilename () const"
Returns the file name where the grid parameters are saved\&. They are needed for the visualization software\&. 
.PP
\fBReturns:\fP
.RS 4
the file name where the grid parameters are saved\&. 
.RE
.PP

.SS "const \fBMap\fP* World::getMap () const"
Returns a pointer to a \fBMap\fP object where the simulation takes place\&. 
.PP
\fBReturns:\fP
.RS 4
a pointer to a \fBMap\fP object where the simulation takes place\&. 
.RE
.PP

.SS "const string& World::getOutputDir () const"
Returns the name of the output folder\&. 
.PP
\fBReturns:\fP
.RS 4
the name of the output folder\&. 
.RE
.PP

.SS "string World::parseProbabilities (const string & probabilitiesFileName)\fC [private]\fP"

.SS "void World::runSimulation ()\fC [noexcept]\fP"
This method is called to perform the actual simulation\&. During the simulation it outputs the exact positions of all persons in a \&.csv file and the positions of antennas at the starting time of the simulation\&. A simulation means a number of time steps, at each step every person move to another position and after arriving at their new positions the mobile phones that they carry try to connect to one of the available antennas\&. The antennas record these events and output them in a file\&. 
.SS "int World::whichMNO (vector< pair< string, double >> probs, vector< MobileOperator *> mnos)\fC [private]\fP"

.SS "void World::writeSignalAndCells (ostream & antennaFile)\fC [private]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBAgentsCollection\fP* World::m_agentsCollection\fC [private]\fP"

.SS "\fBEventFactory\fP* World::m_eventFactory\fC [private]\fP"

.SS "shared_ptr<\fBPostLocProb\fP> World::m_postMethod\fC [private]\fP"

.SS "\fBSimulationConfiguration\fP* World::m_sp\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Simulator from the source code\&.
