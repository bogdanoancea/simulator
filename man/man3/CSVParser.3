.TH "CSVParser" 3 "Thu May 20 2021" "Simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CSVParser
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CSVparser\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCSVParser\fP (const string &data, const \fBDataType\fP &type=\fBeFILE\fP, char sep=',', bool hasHeader=true)"
.br
.ti -1c
.RI "\fB~CSVParser\fP (void)"
.br
.ti -1c
.RI "\fBRow\fP & \fBgetRow\fP (unsigned int row) const"
.br
.ti -1c
.RI "unsigned int \fBrowCount\fP (void) const"
.br
.ti -1c
.RI "unsigned int \fBcolumnCount\fP (void) const"
.br
.ti -1c
.RI "vector< string > \fBgetHeader\fP (void) const"
.br
.ti -1c
.RI "const string \fBgetHeaderElement\fP (unsigned int pos) const"
.br
.ti -1c
.RI "const string & \fBgetFileName\fP (void) const"
.br
.ti -1c
.RI "bool \fBdeleteRow\fP (unsigned int row)"
.br
.ti -1c
.RI "bool \fBaddRow\fP (unsigned int pos, const vector< string > &r)"
.br
.ti -1c
.RI "void \fBsync\fP (void) const"
.br
.ti -1c
.RI "\fBRow\fP & \fBoperator[]\fP (unsigned int row) const"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBparseHeader\fP (void)"
.br
.ti -1c
.RI "void \fBparseContent\fP (void)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "string \fB_file\fP"
.br
.ti -1c
.RI "const \fBDataType\fP \fB_type\fP"
.br
.ti -1c
.RI "const char \fB_sep\fP"
.br
.ti -1c
.RI "vector< string > \fB_originalFile\fP"
.br
.ti -1c
.RI "vector< string > \fB_header\fP"
.br
.ti -1c
.RI "vector< \fBRow\fP * > \fB_content\fP"
.br
.ti -1c
.RI "bool \fBm_header\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class is used to read and parse a csv file or to write some values as a csv file\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CSVParser::CSVParser (const string & data, const \fBDataType\fP & type = \fC\fBeFILE\fP\fP, char sep = \fC','\fP, bool hasHeader = \fCtrue\fP)"
Constructor of the class\&. It need the name of the csv file, the file type, the separator and a boolean that indicates if the file has header or not\&. 
.PP
\fBParameters\fP
.RS 4
\fIdata\fP the name of the file 
.br
\fItype\fP the file type: could be eFILE for normal text files or ePURE if the input is a string 
.br
\fIsep\fP the separator of the individula values in a line of the csv file 
.br
\fIhasHeader\fP true means that the csv file has a header line, false that it doesn't have a header 
.RE
.PP

.SS "CSVParser::~CSVParser (void)"
Destructor 
.SH "Member Function Documentation"
.PP 
.SS "bool CSVParser::addRow (unsigned int pos, const vector< string > & r)"
Inserts a \fBRow\fP object at a given position 
.PP
\fBParameters\fP
.RS 4
\fIpos\fP the position where we want to insert the \fBRow\fP object 
.br
\fIr\fP a vector containing the values in the \fBRow\fP\&. 
.RE
.PP
\fBReturns\fP
.RS 4
true if the insertion is successful, false otherwise (i\&.e\&. the pos parameter is outside the limits of the container that stores the Rows of the csv file\&. 
.RE
.PP

.SS "unsigned int CSVParser::columnCount (void) const"
Returns the number of the columns of the csv file\&. 
.PP
\fBReturns\fP
.RS 4
the number of the columns of the csv file\&. 
.RE
.PP

.SS "bool CSVParser::deleteRow (unsigned int row)"
Removes a row specified by its number 
.PP
\fBParameters\fP
.RS 4
\fIrow\fP the number of the row to be deleted 
.RE
.PP
\fBReturns\fP
.RS 4
true if the removal succeeded, false otherwise 
.RE
.PP

.SS "const string& CSVParser::getFileName (void) const"
Returns the name of the csv file 
.PP
\fBReturns\fP
.RS 4
the name of the csv file 
.RE
.PP

.SS "vector<string> CSVParser::getHeader (void) const"
Returns a vector containing the names of the columns as they are specified in the header line of the csv file\&. 
.PP
\fBReturns\fP
.RS 4
a vector containing the names of the columns as they are specified in the header line of the csv file\&. 
.RE
.PP

.SS "const string CSVParser::getHeaderElement (unsigned int pos) const"
Returns the name of a specific column given by its position in the header line 
.PP
\fBParameters\fP
.RS 4
\fIpos\fP the number of the column 
.RE
.PP
\fBReturns\fP
.RS 4
the name of a specific column given by its position in the header line 
.RE
.PP

.SS "\fBRow\fP& CSVParser::getRow (unsigned int row) const"
Returns a \fBRow\fP object specified by its number in the file 
.PP
\fBParameters\fP
.RS 4
\fIrow\fP the number of the line that was used to build the \fBRow\fP object 
.RE
.PP
\fBReturns\fP
.RS 4
a \fBRow\fP object specified by its number in the file 
.RE
.PP

.SS "\fBRow\fP& CSVParser::operator[] (unsigned int row) const"
Overloaded operator 
.PP
\fBParameters\fP
.RS 4
\fIrow\fP the number of the row to be retrieved 
.RE
.PP
\fBReturns\fP
.RS 4
the \fBRow\fP object at the position specified by row 
.RE
.PP

.SS "void CSVParser::parseContent (void)\fC [protected]\fP"

.SS "void CSVParser::parseHeader (void)\fC [protected]\fP"

.SS "unsigned int CSVParser::rowCount (void) const"
Returns the number of lines in the csv file without counting the header line, if it exists 
.PP
\fBReturns\fP
.RS 4
the number of lines in the csv file without counting the header line, if it exists 
.RE
.PP

.SS "void CSVParser::sync (void) const"
Flushes the content to a file on disk and then closes the file\&. 
.SH "Member Data Documentation"
.PP 
.SS "vector<\fBRow\fP *> CSVParser::_content\fC [private]\fP"

.SS "string CSVParser::_file\fC [private]\fP"

.SS "vector<string> CSVParser::_header\fC [private]\fP"

.SS "vector<string> CSVParser::_originalFile\fC [private]\fP"

.SS "const char CSVParser::_sep\fC [private]\fP"

.SS "const \fBDataType\fP CSVParser::_type\fC [private]\fP"

.SS "bool CSVParser::m_header\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Simulator from the source code\&.
