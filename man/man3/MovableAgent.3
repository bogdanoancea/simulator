.TH "MovableAgent" 3 "Thu May 20 2021" "Simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MovableAgent
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <MovableAgent\&.h>\fP
.PP
Inherits \fBLocatableAgent\fP\&.
.PP
Inherited by \fBHoldableAgent\fP, and \fBPerson\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMovableAgent\fP (const \fBMap\fP *m, const unsigned long id, Point *initPosition, const \fBClock\fP *clock, double initSpeed)"
.br
.ti -1c
.RI "virtual \fB~MovableAgent\fP ()"
.br
.ti -1c
.RI "const string \fBtoString\fP (bool detailed=false) const override"
.br
.ti -1c
.RI "virtual Point * \fBmove\fP ()=0"
.br
.ti -1c
.RI "double \fBgetSpeed\fP () const"
.br
.ti -1c
.RI "void \fBsetSpeed\fP (double speed)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "double \fBm_speed\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class represents an \fBAgent\fP that can move on the map\&. This is an abstract class\&. It is used as a base class for all agents that can move\&. Currently only the \fBPerson\fP, \fBMobilePhone\fP, and \fBTablet\fP classes inherits it and are already implemented\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "MovableAgent::MovableAgent (const \fBMap\fP * m, const unsigned long id, Point * initPosition, const \fBClock\fP * clock, double initSpeed)\fC [explicit]\fP"
Constructor of the class\&. 
.PP
\fBParameters\fP
.RS 4
\fIm\fP a pointer to a \fBMap\fP object used by the simulation\&. 
.br
\fIid\fP the id of the object\&. 
.br
\fIinitPosition\fP the initial location on the map\&. 
.br
\fIclock\fP a pointer to the \fBClock\fP object used by this simulation\&. 
.br
\fIinitSpeed\fP the initial speed of the agent\&. Depending on the derived classes, this value could be read from a configuration file\&. For example, for the \fBPerson\fP class, this value is specified in the persons configuration file\&. 
.RE
.PP

.SS "virtual MovableAgent::~MovableAgent ()\fC [virtual]\fP"
The default destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "double MovableAgent::getSpeed () const"
Returns the speed of this agent\&. 
.PP
\fBReturns\fP
.RS 4
the speed of this agent\&. 
.RE
.PP

.SS "virtual Point* MovableAgent::move ()\fC [pure virtual]\fP"
A pure virtual method used to move the agent to a new location on the map\&. All the classes that inherit \fBMovableAgent\fP implement this function\&. The actual implementation is based on a Strategy design pattern\&. \fBDisplace\fP class defines the displacement strategy interface and the classes that inherits it implements the interface defining concrete displacement methods\&. 
.PP
\fBReturns\fP
.RS 4
the final location after displacement\&. 
.RE
.PP

.PP
Implemented in \fBPerson\fP, \fBMobilePhone\fP, and \fBTablet\fP\&.
.SS "void MovableAgent::setSpeed (double speed)"
Sets the speed of this agent\&. 
.PP
\fBParameters\fP
.RS 4
\fIspeed\fP the speed of this agent\&. 
.RE
.PP

.SS "const string MovableAgent::toString (bool detailed = \fCfalse\fP) const\fC [override]\fP, \fC [virtual]\fP"
Builds a string with the most relevant information of the class\&. It is useful to output the description of concrete agents to the console or to a file\&. Currently, the value of the \fCdetailed\fP parameter is ignored\&. 
.PP
\fBParameters\fP
.RS 4
\fIdetailed\fP the value of this parameter is ignored\&. 
.RE
.PP
\fBReturns\fP
.RS 4
a string object containing the id, the coordinates of the location of the agent and the initial speed of movement\&. 
.RE
.PP

.PP
Reimplemented from \fBLocatableAgent\fP\&.
.PP
Reimplemented in \fBPerson\fP, and \fBTablet\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "double MovableAgent::m_speed\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Simulator from the source code\&.
